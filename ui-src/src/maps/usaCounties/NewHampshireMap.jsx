import React, { useState, useMemo, useCallback } from "react";
import useGameStore from "../../store";
import {
  getMapThemeColors,
  getRegionStyle,
  calculateHeatmapRange,
} from "../../utils/mapHeatmapUtils";
import { getDistrictRegionStyle } from "../../utils/mapDistrictUtils";
import "../JapanMap.css";

const COUNTY_DATA = {
  Strafford: { gameId: "USA_NH_017", name: "Strafford" },
  Coos: { gameId: "USA_NH_007", name: "Coos" },
  Grafton: { gameId: "USA_NH_009", name: "Grafton" },
  Rockingham: { gameId: "USA_NH_015", name: "Rockingham" },
  Merrimack: { gameId: "USA_NH_013", name: "Merrimack" },
  Cheshire: { gameId: "USA_NH_005", name: "Cheshire" },
  Belknap: { gameId: "USA_NH_001", name: "Belknap" },
  Sullivan: { gameId: "USA_NH_019", name: "Sullivan" },
  Carroll: { gameId: "USA_NH_003", name: "Carroll" },
  Hillsborough: { gameId: "USA_NH_011", name: "Hillsborough" },
};

const countyPathData = {
  Strafford:
    "M 478.64 619.14 484.96 612.08 488.14 607.11 495.65 597.6 492.23 576.81 488.35 548.74 494.57 541.39 502.27 531 506.03 551.18 508.13 551.12 510.93 549.32 511.98 551.15 515.78 544.83 516.78 545.76 520.92 545.54 522.37 544 525.53 558.32 537.67 542.12 539.22 540.43 541.09 547.22 539.99 553.17 537.71 557.21 539.8 563.19 538.4 568.14 539.71 571.84 538.13 574.62 534.05 579.24 533.97 585.61 534.7 590.9 536.49 593.6 536.86 596.44 538.6 600.76 541.02 603.52 545.35 602.67 546.78 605.04 550.02 607.85 551.12 611 553.44 614.4 554.61 618.51 556.81 619.25 557.91 622.39 562.07 624.61 562.9 626.98 566.56 627.87 567.63 631.34 572.3 632.83 574.18 636.89 572.59 639.95 571.81 646.97 570.12 648.51 571.24 652.2 570.18 653.93 570.03 657.32 569.01 660.7 570.64 666.73 572.18 668.1 570.9 669.5 568.19 669.08 566.14 667.09 562.66 667.65 563.08 676.74 562.69 678.59 559.87 681.11 556.09 680.07 546.69 678.27 536.22 680.72 515.55 681.09 525.8 663.81 502.97 644.97 476.12 622.14 478.64 619.14 Z",
  Coos: "M 526.7 313.03 519.2 313.43 519.72 316.13 519.77 327.58 513.59 327.62 507.41 328.3 473.6 325.8 461.84 358.58 462.63 358.54 460.64 372.51 457.92 372.57 455.33 374.37 453.62 372.45 453.66 362.84 450.69 349.89 444.56 345.94 442.18 334.98 437.55 335.77 431.48 324.47 425.66 321.19 417.72 322.55 417.37 320.3 402.32 322.86 399.84 307.52 377.87 297.8 375.68 299.16 360.59 276.46 362.7 276.44 365.72 277.97 366.97 275.51 371.8 275.48 374.53 274.17 380.28 269.62 379.56 267.9 383.85 265.72 385.42 259.9 387.4 259.87 387.1 255.4 389.61 254.48 391.56 255.41 393.03 252.15 397.08 252.01 397.99 249.83 402.01 246.56 398.19 241.18 400.66 240.67 402.5 238.1 402.52 235.38 397.55 231.34 397.76 229.19 399.62 227.69 403.57 228.61 408 226.5 408.62 224 410.66 221.72 410.07 220.28 407.11 219.31 405.57 217.29 407.05 214.68 406.41 211.23 407.37 208.02 404.93 206.01 406.11 204.61 405.03 201.21 401.53 201.63 400.01 199.52 399.91 194.49 397.74 193.48 397.15 185.64 391.15 177.76 391.39 173.57 389.91 170.6 393.23 169.43 394.3 166.96 397.93 163.58 398.5 161.36 401.29 160.72 403.12 158.09 403.69 153.77 402.08 152.25 402.64 149.74 405.06 148.93 407.6 144.27 406.55 141.67 408.28 138.69 408.71 135.82 411.14 134.79 414.53 130.09 415.54 127.54 419.46 122.71 417.61 119.61 415.22 117.21 414.76 110.51 415.03 105.84 412.77 103.65 410.15 98.76 410.68 96.52 413.15 94.27 417.61 92.34 420.78 94.5 426.23 90.66 418.29 90.77 418.53 86.8 420.43 82.07 417.37 79.93 418.99 78.1 418.84 73.55 421.45 70.83 425.36 69.11 426.1 66.38 429.47 62.85 429.72 60.53 433.89 56.92 433.87 53.3 432.36 52.1 432.92 49.19 434.31 47.93 434.76 44.07 435.96 42.66 440.53 32.53 439.34 28.92 431.69 23.62 435.63 23.62 439.45 20.59 443.67 22.93 445.06 19.86 448.01 18.84 449.34 16.09 447.95 13.27 453.74 11.21 454.74 9.1 459.64 6.85 461.34 3.99 465.09 2.32 466.07 4.46 469.16 4.91 469.59 9.82 475.61 15 477.21 18.25 480.72 18 482.61 16.81 487.92 20.73 491.31 17.97 494.5 20.38 497.56 19.82 500.57 14.26 501.42 10.5 503.26 9.24 502.51 7.43 505.27 2.1 508.26 1 509.91 18.89 510.99 39.07 511.77 50.35 514.34 92.89 514.6 94.38 515.88 115.54 517.83 141.77 519.6 169.11 521.25 199.73 522.44 229.49 523.93 255.29 525.35 284.53 526.02 295.94 526.7 313.03 Z",
  Grafton:
    "M 360.59 276.46 375.68 299.16 377.87 297.8 399.84 307.52 402.32 322.86 417.37 320.3 417.72 322.55 425.66 321.19 431.48 324.47 437.55 335.77 435.21 336.16 438.19 349.44 443.94 353.17 446.32 364.27 446.34 368.8 445.22 370.7 448.62 379.66 452.97 379.55 446.44 391.54 444.86 393.72 449.76 426.32 404.92 433.4 409.57 463.09 410.85 462.96 412.28 473.81 414.58 493.07 392.37 496.21 386.4 497.22 386.29 500.66 384.89 504.33 385.87 509.29 384.53 513.29 385.78 516.61 382.68 518.91 381.49 521.67 377.56 524.61 373.89 524.48 371.95 522.9 367.9 526.58 371.41 529.82 369.38 532.05 368.77 534.25 365.64 532.67 362.55 533.62 361.32 532.92 357.65 537.57 355.85 534.8 353.2 535.45 351.68 537.49 348.6 538.89 341.72 519.6 332.14 530.76 329.22 535.32 322.48 544.72 293.14 539.98 292.63 537.17 287.83 544.58 281.32 541.66 284.41 537.03 261.79 527.2 247.03 524.76 234.81 522.42 235.15 520.39 233.72 518.03 235.41 511.24 238.12 509.91 238.43 505.33 240.29 502.17 240.91 498.65 240.5 493.37 241.76 490.03 247.2 483.57 253.94 478.86 256.37 478 259.52 472.62 262.86 470.34 262.8 466.23 265.13 463.88 267.43 460.11 266.65 454.42 268.07 451.14 267.94 447.75 266.85 444.38 267.99 441.51 271.3 440.43 270.07 437.19 272.72 435.04 275.03 430.49 281.12 425.83 282.42 423.83 282.73 416.53 285.49 415.5 286.69 413.52 285.37 409.69 283.25 410.16 283.84 404.5 282.79 402.16 285.77 399.19 285.31 397.09 287.11 395.83 288.08 393.15 289.8 394 292.16 390.43 291.41 387.25 294.22 385.5 293.8 382.78 296.08 382.69 297.94 379.44 297.16 377.08 301.42 375.63 298.97 374.25 301.63 372.57 297.22 369.62 296.63 366.77 297.26 363.87 300.67 362.24 301.45 360.46 299.59 358.46 299.79 353.37 297.18 349.19 296.21 345.66 294.31 342.49 295.67 339.23 295.8 336.21 297.37 333.6 297.14 331.41 298.41 327.61 295.82 321.97 296.11 318.24 293.94 317.55 296.06 312.99 300.33 310.04 301.83 308.05 302.67 301.96 304.9 302.64 312.04 299.3 313.22 297.39 317.17 297.69 324.65 297.4 327.23 294.67 330.55 294.39 337.1 297.73 341.46 296.44 345.72 293.62 348.89 292.77 350.31 291.43 349.46 288.34 349.89 283.9 353.07 282.68 352.54 280.4 355.1 278.3 357.75 278.45 360.59 276.46 Z",
  Rockingham:
    "M 443.94 703.59 441.54 693.89 443.95 694.42 451.99 675.21 461.02 656.82 469.75 637.19 472.7 629.85 475.08 625.59 476.12 622.14 502.97 644.97 525.8 663.81 515.55 681.09 536.22 680.72 546.69 678.27 556.09 680.07 559.87 681.11 562.69 678.59 563.08 676.74 562.66 667.65 566.14 667.09 568.19 669.08 570.9 669.5 572.18 668.1 574.73 669.76 580.35 674.65 583.94 676.84 586.59 680.97 590.72 682.81 597.8 682.27 598.46 687.08 596.73 687.59 596.66 691.95 595.16 695.45 593.04 696.92 591.51 701.65 588.32 707.96 586.81 708.08 585.08 711.5 585.16 713.48 582.68 718.56 580.55 720.55 580.34 722.61 578.59 723.9 577.72 729.71 575.97 731.06 574.94 734.03 574.92 738.47 573.87 740.88 573.56 744.62 570.53 745.68 566.54 748.16 558.03 741.62 554.28 740.45 547.97 741.1 539.98 745.94 525.43 749.08 522.48 752.26 520.45 757.07 518.12 765.28 502.69 760.77 495.26 764.7 490.67 770.23 491.73 786.46 482.22 783.73 477.34 785.01 474.04 781 453.5 776.06 453.38 773.49 450.47 772.08 451.3 767.88 445.3 760.38 436.31 760.02 430.79 727.74 447.83 724.98 443.94 703.59 Z",
  Merrimack:
    "M 322.48 544.72 329.22 535.32 332.14 530.76 341.72 519.6 348.6 538.89 351.68 537.49 353.2 535.45 355.85 534.8 357.65 537.57 361.32 532.92 362.55 533.62 365.64 532.67 368.77 534.25 369.96 537.45 371.43 537.97 373.49 542.14 377.43 544.69 376.8 548.71 379.96 553.49 384.96 556.09 388.7 556.16 390.5 560.57 390.91 566.32 392.74 570.81 396.96 573.51 400.62 570.58 402.7 569.98 405.86 567.45 408.47 568.19 453.29 600.43 478.64 619.14 476.12 622.14 475.08 625.59 472.7 629.85 469.75 637.19 461.02 656.82 451.99 675.21 443.95 694.42 441.54 693.89 443.94 703.59 431 700.34 429.9 693.02 425.59 695.7 423.44 693.74 422.19 690.66 416.88 691.33 415.81 685.44 388.02 689.97 382.08 659.9 353.29 667.5 339.84 671.28 327.12 643.13 305.63 648.93 298.4 638.25 297.61 628.44 293.1 628.33 287.67 607.67 296.37 591.33 297.02 588.39 297.48 580.71 294.99 576.91 295.98 571.46 305.43 572.79 310.16 564.23 322.48 544.72 Z",
  Cheshire:
    "M 206.31 656.38 210.79 656.89 210.83 664.28 224.18 665.47 223.26 657.65 233.58 658.5 233.2 656.15 247.05 654.4 272.55 650.57 268.79 660.65 267.57 665.87 279.97 666.6 299.03 666.97 299.94 666.99 298.11 681.2 294.44 700.55 293.37 723.21 305.97 723.57 308.41 741.69 312.88 770.8 319.73 771.13 320.45 774.91 323.1 794.43 311.28 794.07 278.98 792.59 242.55 791.14 203.62 789.22 203.08 787.27 200.39 783.36 199.78 779.75 196.4 775.2 191.41 777.8 190.61 776.31 192.42 772.88 190.31 769.58 185.57 765.2 184.45 760.4 183.67 753.8 181.75 750.42 182.84 740.66 185.59 739.34 187.69 736.74 188.02 732.58 189.38 730.47 188.91 723.93 187.16 720.85 187.71 719.31 190.83 716.83 196.65 715.52 199.12 713.6 200.88 714.21 203.66 710.92 202.84 708.88 204.08 705.67 206.61 705.36 207.55 702.5 204.79 700.42 203.48 696.97 204.13 693.26 202.57 689.58 207.6 683.91 209.89 679.26 208.17 674.9 210.03 672.14 210.48 669.16 208.28 665.92 208.75 664.21 206.27 663.23 205.19 660.89 206.31 656.38 Z",
  Belknap:
    "M 412.28 473.81 428.14 489.46 451.09 511.18 473.3 531.62 480.05 533.64 484.25 537.92 486.34 535.27 494.57 541.39 488.35 548.74 492.23 576.81 495.65 597.6 488.14 607.11 484.96 612.08 478.64 619.14 453.29 600.43 408.47 568.19 405.86 567.45 402.7 569.98 400.62 570.58 396.96 573.51 392.74 570.81 390.91 566.32 390.5 560.57 388.7 556.16 384.96 556.09 379.96 553.49 376.8 548.71 377.43 544.69 373.49 542.14 371.43 537.97 369.96 537.45 368.77 534.25 369.38 532.05 371.41 529.82 367.9 526.58 371.95 522.9 373.89 524.48 377.56 524.61 381.49 521.67 382.68 518.91 385.78 516.61 384.53 513.29 385.87 509.29 384.89 504.33 386.29 500.66 386.4 497.22 392.37 496.21 414.58 493.07 412.28 473.81 Z",
  Sullivan:
    "M 234.81 522.42 247.03 524.76 261.79 527.2 284.41 537.03 281.32 541.66 287.83 544.58 292.63 537.17 293.14 539.98 322.48 544.72 310.16 564.23 305.43 572.79 295.98 571.46 294.99 576.91 297.48 580.71 297.02 588.39 296.37 591.33 287.67 607.67 293.1 628.33 297.61 628.44 298.4 638.25 305.63 648.93 299.4 650.56 302.36 657.4 299.03 666.97 279.97 666.6 267.57 665.87 268.79 660.65 272.55 650.57 247.05 654.4 233.2 656.15 233.58 658.5 223.26 657.65 224.18 665.47 210.83 664.28 210.79 656.89 206.31 656.38 206.24 653.08 208.24 650.01 206.81 646.86 209.65 643.75 209.07 638.76 210.64 634.37 209.49 631.06 210.37 626.71 213.43 625.22 216.56 619.3 217.99 613.04 219.41 610.12 216.13 604.38 218.26 600.08 220.53 597.29 215.54 594.87 215 590.65 215.65 588.28 217.75 585.96 219.7 571.73 220.87 567.86 220.45 563.62 222.92 559.05 223.14 554.98 222.29 552.88 219.25 548.82 220.26 544.56 221.4 544.3 223.38 540.46 222.94 533.35 223.51 530.45 225.04 528.61 230.28 526.19 234.81 522.42 Z",
  Carroll:
    "M 437.55 335.77 442.18 334.98 444.56 345.94 450.69 349.89 453.66 362.84 453.62 372.45 455.33 374.37 457.92 372.57 460.64 372.51 462.63 358.54 461.84 358.58 473.6 325.8 507.41 328.3 513.59 327.62 519.77 327.58 519.72 316.13 519.2 313.43 526.7 313.03 529.14 371.64 529.91 387.57 531.46 425.74 531.55 431.86 532.29 449.29 532.6 463.6 533.63 475.66 534.41 491.56 535.99 514.76 536.8 531.52 540.58 534.69 541.72 537.36 541.16 539.39 539.22 540.43 537.67 542.12 525.53 558.32 522.37 544 520.92 545.54 516.78 545.76 515.78 544.83 511.98 551.15 510.93 549.32 508.13 551.12 506.03 551.18 502.27 531 494.57 541.39 486.34 535.27 484.25 537.92 480.05 533.64 473.3 531.62 451.09 511.18 428.14 489.46 412.28 473.81 410.85 462.96 409.57 463.09 404.92 433.4 449.76 426.32 444.86 393.72 446.44 391.54 452.97 379.55 448.62 379.66 445.22 370.7 446.34 368.8 446.32 364.27 443.94 353.17 438.19 349.44 435.21 336.16 437.55 335.77 Z",
  Hillsborough:
    "M 299.03 666.97 302.36 657.4 299.4 650.56 305.63 648.93 327.12 643.13 339.84 671.28 353.29 667.5 382.08 659.9 388.02 689.97 415.81 685.44 416.88 691.33 422.19 690.66 423.44 693.74 425.59 695.7 429.9 693.02 431 700.34 443.94 703.59 447.83 724.98 430.79 727.74 436.31 760.02 445.3 760.38 451.3 767.88 450.47 772.08 453.38 773.49 453.5 776.06 474.04 781 477.34 785.01 472.32 790.14 469.85 794.62 466.42 799 453.4 798.7 364.46 796.03 323.1 794.43 320.45 774.91 319.73 771.13 312.88 770.8 308.41 741.69 305.97 723.57 293.37 723.21 294.44 700.55 298.11 681.2 299.94 666.99 299.03 666.97 Z",
};

const countyOrderFromSVG = [
  "Strafford",
  "Coos",
  "Grafton",
  "Rockingham",
  "Merrimack",
  "Cheshire",
  "Belknap",
  "Sullivan",
  "Carroll",
  "Hillsborough",
];

function NewHampshireMap({
  onSelectCounty,
  selectedCountyGameId,
  heatmapData,
  viewType,
  onCountyHover,
  onCountyLeave,
}) {
  const [hoveredCountyId, setHoveredCountyId] = useState(null);
  const [tooltipData, setTooltipData] = useState(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const currentTheme = useGameStore(
    (state) => state.availableThemes[state.activeThemeName]
  );

  const themeColors = getMapThemeColors(currentTheme);
  useMemo(
    () => calculateHeatmapRange(heatmapData, viewType),
    [heatmapData, viewType]
  );

  const getCountyStyle = useCallback(
    (svgId) => {
      if (viewType === "congressional_districts") {
        return getDistrictRegionStyle({
          regionId: null,
          svgId,
          regionData: COUNTY_DATA,
          heatmapData,
          viewType,
          theme: themeColors,
          hoveredId: hoveredCountyId,
          selectedId: selectedCountyGameId,
          isClickable: !!onSelectCounty,
        });
      }

      return getRegionStyle({
        regionId: null,
        svgId,
        regionData: COUNTY_DATA,
        heatmapData,
        viewType,
        theme: themeColors,
        hoveredId: hoveredCountyId,
        selectedId: selectedCountyGameId,
        isClickable: !!onSelectCounty,
      });
    },
    [
      viewType,
      heatmapData,
      themeColors,
      hoveredCountyId,
      selectedCountyGameId,
      onSelectCounty,
    ]
  );
  const handleCountyClick = useCallback((svgId) => {
    const county = COUNTY_DATA[svgId];
    if (county && onSelectCounty) {
      onSelectCounty(county.gameId, county.name);
    } else {
      console.warn(`No game data found for SVG ID: ${svgId}`);
    }
  }, [onSelectCounty]);

  const handleMouseEnter = useCallback((svgId, event) => {
    const countyInfo = COUNTY_DATA[svgId];
    if (!countyInfo) return;

    setHoveredCountyId(countyInfo.gameId);

    // Call the external hover handler if provided (for election night tooltips)
    if (onCountyHover) {
      onCountyHover(countyInfo.gameId, event);
    } else {
      // Fallback to internal tooltip for other uses
      if (viewType === "congressional_districts" && heatmapData?.mapData) {
        const mapDataItem = heatmapData.mapData.find(
          (item) => item.id === countyInfo.gameId
        );
        if (mapDataItem) {
          setTooltipData({
            name: countyInfo.name,
            isSplit: mapDataItem.isSplit,
            splitDetails: mapDataItem.splitDetails,
            districtLabel: mapDataItem.value,
          });
        }
      } else {
        setTooltipData({
          name: countyInfo.name,
          isSplit: false,
          splitDetails: null,
          districtLabel: null,
        });
      }

      setMousePosition({ x: event.clientX, y: event.clientY });
    }
  }, [onCountyHover, viewType, heatmapData]);

  const handleMouseLeave = useCallback(() => {
    setHoveredCountyId(null);
    setTooltipData(null);
    
    // Call the external leave handler if provided
    if (onCountyLeave) {
      onCountyLeave();
    }
  }, [onCountyLeave]);

  const handleMouseMove = useCallback((event) => {
    setMousePosition({ x: event.clientX, y: event.clientY });
  }, []);

  const renderCountyPath = (svgId) => {
    const countyInfo = COUNTY_DATA[svgId];
    if (!countyInfo) {
      console.warn(`No COUNTY_DATA found for SVG ID: ${svgId}`);
      return null;
    }

    const pathD = countyPathData[svgId];
    if (!pathD) {
      console.warn(`Path data (d attribute) missing for ${svgId}`);
      return null;
    }

    return (
      <path
        key={svgId}
        id={svgId}
        title={countyInfo.name}
        className={`prefecture-path ${
          selectedCountyGameId === countyInfo.gameId ? "selected" : ""
        }`}
        style={getCountyStyle(svgId)}
        onMouseEnter={(e) => handleMouseEnter(svgId, e)}
        onMouseLeave={handleMouseLeave}
        onMouseMove={handleMouseMove}
        onClick={() => handleCountyClick(svgId)}
        d={pathD}
      />
    );
  };

  return (
    <>
      <svg
        version="1.2"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 810 810"
        className="interactive-japan-map new-hampshire-map"
        preserveAspectRatio="xMidYMid meet"
      >
        <g id="new-hampshire-counties-group" stroke="white" strokeWidth="1">
          {countyOrderFromSVG.map((svgId) => renderCountyPath(svgId))}
        </g>
      </svg>
      {tooltipData && !onCountyHover && (
        <div
          style={{
            position: "fixed",
            left: mousePosition.x + 10,
            top: mousePosition.y - 10,
            backgroundColor: "rgba(0, 0, 0, 0.9)",
            color: "white",
            padding: "8px 12px",
            borderRadius: "4px",
            fontSize: "12px",
            pointerEvents: "none",
            zIndex: 1000,
            maxWidth: "250px",
            boxShadow: "0 2px 8px rgba(0, 0, 0, 0.3)",
          }}
        >
          <div style={{ fontWeight: "bold", marginBottom: "4px" }}>
            {tooltipData.name} County
          </div>

          {tooltipData.isSplit && tooltipData.splitDetails ? (
            <div>
              <div
                style={{
                  color: themeColors.selectedColor || "#ff6b35",
                  fontWeight: "bold",
                  marginBottom: "4px",
                }}
              >
                Split County
              </div>
              <div style={{ fontSize: "11px" }}>
                {tooltipData.splitDetails.map((detail, index) => (
                  <div key={index} style={{ marginBottom: "2px" }}>
                    District {detail.districtId}:{" "}
                    {detail.population.toLocaleString()} people
                  </div>
                ))}
              </div>
            </div>
          ) : (
            tooltipData.districtLabel && (
              <div style={{ fontSize: "11px" }}>
                {tooltipData.districtLabel}
              </div>
            )
          )}
        </div>
      )}
    </>
  );
}

export default NewHampshireMap;
